
# TODO

- grr option to adopt an existing CR and patchset
- grr's addition of "Reviewed by" comments to the tickets does so even if
  the vote is *negative*. That's wrong.
- grr support for *multiple* tickets
- `grr --integrate,-I` that checks for approvals, does the integration,
  and then calls `grrDelete`.
- change <parenthetical> to being an *option*, makes it clearer how to update
  it later:
        grr ISSUE
        ...
        grr -p "my parenthetical that I remembered to add later"
- doc the opinions and expected workflow in README.md
- eslint
- `grr -D` may delete other non-grr branch details, which isn't right
- --dry-run support
- --commit
- `grr -D` to check that all commits have been pushed to Gerrit, else require
  a -f
- support an option (in config and per branch) to push to a remote GH branch
  as well for every `grr`. Then have some of the GH branch utilities
  (nicer full diff, seeing individual commits as they were made, ability to
  use jenkins.joyent.us `TRY_BRANCH`)
- support pulling ticket title from smartos.org/bugview for public issues
  (then don't have to be internal Joyent Eng to use `grr`)
- perhaps add draft support: `git push origin HEAD:refs/drafts/master`
  This makes a "Draft" CR that only those added as reviewers can see. I
  don't know if there are other implications.
- handle the scenario below?





## scenario: `grr TOOLS-123` when not on that branch locally

What happens if the user does `grr TOOLS-123` when not on the already created
branch for that. There are a few cases.

1. `grr/TOOLS-123` branch exists locally, currently on master.

        [~/src/myproject (master)]$ grr TOOLS-123
        grr: error: 'grr/TOOLS-123' branch already exists. Switch to it or use '--force'.

    TODO: add '-f,--force' for creating a new branch.

2. `grr/TOOLS-123` branch exists locally, currently on some other branch.

        [~/src/myproject (foo)]$ grr TOOLS-123
        grr: error: TOOLS-123 does not match the CR issue (TOOLS-124) for the current branch (grr/TOOLS-123)

3. `TOOLS-123` branch exists locally and was manually used for CR'ing that
   issue earlier. Don't want to have `grr` start searching all branch configs
   right now. So this is a foot gun. The result is that it'll create a new
   'grr/TOOLS-123' branch.

        [~/src/myproject (master)]$ grr TOOLS-123
        Issue: TOOLS-123 add feature X
        Creating branch for CR: grr/TOOLS-123
        Not creating CR: no commits over master
        [~/src/myproject (grr/TOOLS-123)]$

    TODO: add '-f,--force' for creating a new branch.
